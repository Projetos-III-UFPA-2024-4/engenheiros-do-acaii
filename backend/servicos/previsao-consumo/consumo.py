from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import Select
import pandas as pd
import time

# === CONFIGURA√á√ïES ===
CPF = "05795503207"  # CPF SEM PONTOS OU TRA√áOS
DATA_NASCIMENTO = "16/05/2002"  # Data de nascimento COM BARRAS (Respeitando m√°scara)
VALOR_CONTA_CONTRATO = "003025802461|2001090392"  # Insira o valor exato da conta contrato
URL_SITE = "https://pa.equatorialenergia.com.br/sua-conta/historico-de-consumo/"  # URL do site
CAMINHO_CSV = r"C:\david\engenheiros-do-acaii\backend\servicos\previsao-consumo\consumo.csv"  # Defina o caminho do CSV no seu computador
MODO_VISIVEL = True  # Defina como False para rodar em segundo plano

# === CONFIGURA√á√ÉO DO DRIVER ===
chrome_options = webdriver.ChromeOptions()
if not MODO_VISIVEL:
    chrome_options.add_argument("--headless")  # Executa sem abrir o navegador

driver = webdriver.Chrome(options=chrome_options)
wait = WebDriverWait(driver, 30)  # Aumentamos o tempo de espera para 30 segundos

try:
    # 1. ACESSAR O SITE
    driver.get(URL_SITE)
    print("üåê Acessando o site...")

    # 2. FECHAR POP-UP (Clique em "CONTINUAR NO SITE")
    try:
        botao_continuar = wait.until(EC.element_to_be_clickable((By.CLASS_NAME, "btn-default")))
        botao_continuar.click()
        print("‚úÖ Pop-up fechado com sucesso.")
    except:
        print("‚ö†Ô∏è Pop-up n√£o encontrado! Tentando com JavaScript...")
        try:
            driver.execute_script("document.querySelector('.btn-default').click();")
            print("‚úÖ Pop-up fechado via JavaScript.")
        except:
            print("‚ùå Erro: N√£o foi poss√≠vel fechar o pop-up.")

    # 3. INSERIR CPF
    campo_cpf = wait.until(EC.presence_of_element_located((By.ID, "identificador-otp")))
    campo_cpf.clear()
    time.sleep(1)

    for char in CPF:
        campo_cpf.send_keys(char)
        time.sleep(0.1)  # Pequeno delay para evitar problemas com a m√°scara

    campo_cpf.send_keys(Keys.TAB)  # Usa TAB para sair do campo e evitar problemas
    print("‚úÖ CPF inserido corretamente.")

    # 4. CLICAR NO PRIMEIRO BOT√ÉO "ENTRAR"
    try:
        botao_entrar = wait.until(EC.element_to_be_clickable((By.ID, "envia-identificador-otp")))
        botao_entrar.click()
        print("‚úÖ Primeiro bot√£o 'Entrar' clicado.")
    except:
        print("‚ö†Ô∏è Bot√£o 'Entrar' n√£o encontrado! Tentando via JavaScript...")
        try:
            driver.execute_script("document.getElementById('envia-identificador-otp').click();")
            print("‚úÖ Bot√£o 'Entrar' clicado via JavaScript.")
        except:
            print("‚ùå Erro: N√£o foi poss√≠vel clicar no primeiro bot√£o 'Entrar'.")

    # 5. ESPERAR E INSERIR DATA DE NASCIMENTO
    try:
        campo_data = wait.until(EC.presence_of_element_located((By.ID, "senha-identificador")))
        campo_data.clear()
        time.sleep(1)

        for char in DATA_NASCIMENTO:
            campo_data.send_keys(char)
            time.sleep(0.1)  # Pequeno delay para evitar problemas com a m√°scara

        campo_data.send_keys(Keys.TAB)  # Usa TAB para confirmar a entrada
        print("‚úÖ Data de nascimento inserida corretamente.")
    except:
        print("‚ö†Ô∏è Campo de Data de Nascimento n√£o encontrado! Tentando via JavaScript...")
        try:
            driver.execute_script(f"document.getElementById('senha-identificador').value = '{DATA_NASCIMENTO}';")
            driver.execute_script("document.getElementById('senha-identificador').dispatchEvent(new Event('change'));")
            print("‚úÖ Data de nascimento inserida via JavaScript.")
        except:
            print("‚ùå Erro: N√£o foi poss√≠vel inserir a Data de Nascimento.")

    # 6. CLICAR NO SEGUNDO BOT√ÉO "ENTRAR" E GARANTIR QUE O PROCESSAMENTO OCORREU
    try:
        botao_entrar_novamente = wait.until(EC.element_to_be_clickable((By.ID, "envia-identificador")))
        botao_entrar_novamente.click()
        print("‚úÖ Segundo bot√£o 'Entrar' clicado.")

        # üîÑ Esperar at√© que o bot√£o mude para "Aguarde"
        try:
            print("‚è≥ Aguardando o bot√£o mudar para 'Aguarde'...")
            wait.until(EC.text_to_be_present_in_element((By.ID, "envia-identificador"), "Aguarde"))
            print("‚úÖ O bot√£o mudou para 'Aguarde'.")
        except:
            print("‚ö†Ô∏è O bot√£o n√£o mudou para 'Aguarde'. Tentando clicar novamente...")
            botao_entrar_novamente.click()
            time.sleep(2)  # Pequena pausa antes de verificar novamente

        # üîÑ ESPERAR O PROCESSO DE CARREGAMENTO ANTES DA CONTA CONTRATO
        try:
            print("‚è≥ Aguardando o pop-up de 'Processando' aparecer...")
            wait.until(EC.presence_of_element_located((By.CLASS_NAME, "processando-popup")))  # Ajuste a classe se necess√°rio

            print("‚è≥ Aguardando o pop-up de 'Processando' desaparecer...")
            wait.until(EC.invisibility_of_element_located((By.CLASS_NAME, "processando-popup")))  # Espera ele sumir
            print("‚úÖ Processo de carregamento conclu√≠do.")

        except:
            print("‚ö†Ô∏è O pop-up de 'Processando' n√£o foi encontrado, continuando mesmo assim...")

        # üîÑ Verificar se o bot√£o "Entrar" reapareceu
        try:
            botao_entrar_novamente = driver.find_element(By.ID, "envia-identificador")
            if botao_entrar_novamente.is_displayed():
                print("‚ö†Ô∏è O bot√£o 'Entrar' reapareceu! Tentando clicar novamente...")
                botao_entrar_novamente.click()
                time.sleep(3)  # Espera extra para garantir o processamento
        except:
            print("‚úÖ O bot√£o 'Entrar' n√£o reapareceu, continuando normalmente.")

    except:
        print("‚ö†Ô∏è Segundo bot√£o 'Entrar' n√£o encontrado! Tentando via JavaScript...")
        try:
            driver.execute_script("document.getElementById('envia-identificador').click();")
            print("‚úÖ Segundo bot√£o 'Entrar' clicado via JavaScript.")
        except:
            print("‚ùå Erro: N√£o foi poss√≠vel clicar no segundo bot√£o 'Entrar'.")


    # 7. ESPERAR E SELECIONAR A CONTA CONTRATO PELO VALOR
    try:
        print("‚è≥ Aguardando a exibi√ß√£o da √°rea de sele√ß√£o de conta contrato...")

        wait.until(EC.presence_of_element_located((By.CLASS_NAME, "select-wrap")))
        wait.until(EC.visibility_of_element_located((By.CLASS_NAME, "select-wrap")))

        print("‚úÖ A √°rea de sele√ß√£o de conta contrato apareceu.")

        # Agora, esperar at√© que o <select> seja carregado
        wait.until(EC.presence_of_element_located((By.ID, "conta_contrato")))
        wait.until(EC.visibility_of_element_located((By.ID, "conta_contrato")))
        wait.until(EC.element_to_be_clickable((By.ID, "conta_contrato")))

        time.sleep(2)  # Tempo extra para evitar erro "stale element reference"
        select_conta = driver.find_element(By.ID, "conta_contrato")
        select = Select(select_conta)

        # üöÄ SELECIONAR A CONTA PELO VALOR
        try:
            select.select_by_value(VALOR_CONTA_CONTRATO)
            print(f"‚úÖ Conta contrato selecionada pelo valor: {VALOR_CONTA_CONTRATO}")
        except:
            print(f"‚ö†Ô∏è Valor {VALOR_CONTA_CONTRATO} n√£o encontrado, tentando selecionar a segunda conta...")

            opcoes = select.options
            if len(opcoes) > 1:
                select.select_by_index(1)
                print(f"‚úÖ Segunda conta contrato selecionada: {opcoes[1].text}")
            else:
                print(f"‚ö†Ô∏è Apenas uma conta contrato dispon√≠vel: {opcoes[0].text}")

    except Exception as e:
        print(f"‚ùå Erro: O campo de conta contrato demorou muito para aparecer. Detalhes: {e}")


    # 8. SALVAR DADOS EM CSV
    # print("‚è≥ Salvando o arquivo CSV...")
    # df.to_csv(CAMINHO_CSV, encoding="utf-8", index_label="M√™s")
    # print(f"‚úÖ Arquivo CSV salvo com sucesso em: {CAMINHO_CSV}")

    #EXCLUIR A ETAPA 9 EM DIANTE


    # 8. ESPERAR O GR√ÅFICO CARREGAR (DETECTANDO O <CANVAS> CORRETAMENTE)
    print("‚è≥ Aguardando o carregamento do gr√°fico...")

    while True:
        try:
            # Verifica se o elemento <canvas> do gr√°fico est√° presente e vis√≠vel
            canvas_element = wait.until(EC.presence_of_element_located((By.ID, "historico-consumo")))
            canvas_visible = wait.until(EC.visibility_of_element_located((By.ID, "historico-consumo")))

            if canvas_element and canvas_visible:
                print("‚úÖ O gr√°fico foi detectado na tela!")
                break  # Sai do loop pois o gr√°fico foi encontrado

        except Exception as e:
            pass  # Continua tentando at√© que o gr√°fico apare√ßa

        time.sleep(2)  # Aguarda 2 segundos antes de tentar novamente

    # 9. EXTRAIR DADOS DO GR√ÅFICO
    try:
        print("‚è≥ Tentando extrair os dados do gr√°fico...")

        script_extracao = """
        var charts = Object.values(Chart.instances);
        if (charts.length > 0) {
            var chart = charts[0];  // Pega o primeiro gr√°fico carregado
            return {
                labels: chart.data.labels,
                datasets: chart.data.datasets.map(ds => ({label: ds.label, data: ds.data}))
            };
        } else {
            return null;
        }
        """

        dados = driver.execute_script(script_extracao)

        # Verificar se h√° dados extra√≠dos
        if not dados or not dados["labels"] or not dados["datasets"]:
            print("‚ö†Ô∏è Nenhum dado foi encontrado no gr√°fico. Tentando novamente ap√≥s 3 segundos...")
            time.sleep(3)  # D√° mais tempo para carregamento ass√≠ncrono
            dados = driver.execute_script(script_extracao)  # Tenta extrair os dados novamente

            if not dados or not dados["labels"] or not dados["datasets"]:
                print("‚ùå Falha ao extrair dados do gr√°fico ap√≥s tentativa extra.")
                df = None  # Definir df como None para evitar erro ao salvar
            else:
                print("‚úÖ Dados extra√≠dos na segunda tentativa!")

        if dados:
            labels = dados["labels"]
            datasets = dados["datasets"]

            # Criar o DataFrame com os dados do gr√°fico
            df = pd.DataFrame({ds["label"]: ds["data"] for ds in datasets}, index=labels)

            print("‚úÖ Dados extra√≠dos com sucesso!")

    except Exception as e:
        print(f"‚ùå Erro ao extrair dados do gr√°fico: {e}")
        df = None  # Evita erro ao tentar salvar se a extra√ß√£o falhar

    # 10. SALVAR DADOS EM CSV
    if df is not None:
        try:
            print("‚è≥ Salvando o arquivo CSV...")
            df.to_csv(CAMINHO_CSV, encoding="utf-8", index_label="M√™s")
            print(f"‚úÖ Arquivo CSV salvo com sucesso em: {CAMINHO_CSV}")
        except Exception as e:
            print(f"‚ùå Erro ao salvar o arquivo CSV: {e}")
    else:
        print("‚ö†Ô∏è Nenhum dado foi extra√≠do, arquivo CSV n√£o ser√° salvo.")

    # 11. SALVAR DADOS EM CSV
    if df is not None:
        try:
            print("‚è≥ Salvando o arquivo CSV...")
            df.to_csv(CAMINHO_CSV, encoding="utf-8", index_label="M√™s")
            print(f"‚úÖ Arquivo CSV salvo com sucesso em: {CAMINHO_CSV}")
        except Exception as e:
            print(f"‚ùå Erro ao salvar o arquivo CSV: {e}")
    else:
        print("‚ö†Ô∏è Nenhum dado foi extra√≠do, arquivo CSV n√£o ser√° salvo.")


finally:
    if MODO_VISIVEL:
        input("Pressione Enter para fechar o navegador...")
    driver.quit()
